Model
Simulation
.runRound()
.pause
.switch
SpecificSimulation
- knows all the calculations for a specific simulation

Grid
.updateGrid
.getState
.calculateNextState
.switchNextState

Cell
.checkNeighbors

// Grid will be created in the simulation
// Grid will create all the cells based on the simulation type
// Grid will call .updateGrid
// Cell will know its location and Simulation will update cell based on checking its neighbor

View
GameView
.show

Control
Game Engine
.start(simulation)
.end(simulation)

Task List
Backend:
- stop/pause
- calculateNextState for other cells
    - research how each sim works and construct xml file for each
- checkIfDone method

Frontend:
- display objects
- button to go to splash on pause


Game of life rules:
8 neighbors

generate a new cell
if(state==dead){check for 3}

cell survives: at least 2
if(state==alive){check for 2}

Segregation Notes:
States include type and relocation
Type: empty, A, B
calculate reolcate: find # of non null neighbors and number of same state neighbors if it is not an empty cell. set satisfied condition.
add all not satisfied to an arraylist. also make a list of  null spaces.
one by one, u check, move, and add to empty list


clear neighbors function. and then reset neighbors after relocate


add user input based on text file.